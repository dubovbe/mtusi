

test_symbol = '4'
test_string = '5436'
test_list = [1, 2, 3, 4, 5]


def first_last_list_element(input_list):
    '''
    Input:
    input_list(list)
    Output:
    A tuple that contains the first and the last element of a list
    
    The logic of the script checks for incorrect data entry (incorrect data type) 
    and entry of an list of zero length
    '''
    if not isinstance(input_list, list):
        print('Input data type is not list')
        return
    if len(input_list) == 0:
        print('Input list lenght is zero')
        return
    return input_list[0], input_list[-1]
        

def count_symbol(input_symbol, input_string, register=True):
    '''
    Input:
    input_symbol (str, int)
    input_string (str)
    register (bool) flag - by default it is case-sensitive
    Output:
    symbol_counter(int): the number of symbols that occur in the string
    About:
    The program has several checks for erroneous data entry in addition to its basic functionality

    Checking for input character
    In addition to the string, it is possible to enter a number. Other types of data cause an error

    The type of input string is strictly a string (this is mentioned in the technical specification)

    The entered string and the character must not be of zero length

    In addition to the basic functionality of the program added to the register flag. By default, 
    the method used in the function is strictly case-sensitive. It is possible to set the functionality without case sensitivity
    '''
    if not isinstance(input_symbol, str):
        if isinstance(input_symbol, int):
            input_symbol = str(input_symbol)
        else:
            print('Error: data type of the entered symbol not correct')
            return
    if not isinstance(input_string, str):
        print('Error: data type of the entered string not correct')
        return
    if len(input_symbol) == 0 or len(input_string) == 0:
        print('Error: input symbol or string is empty')
        return
    if register:
        symbol_counter = input_string.count(input_symbol)
    else:
        symbol_counter = input_string.lower().count(input_symbol.lower())
    return symbol_counter
    

print (first_last_list_element(test_list))
print(count_symbol(test_symbol, test_string))
    
    
def is_prime(n):
    '''
    Any composite number has an intrinsic (that is, not equal to 1) divisor that 
    does not exceed the square root of the number.

    Such an algorithm terminates either when it finds the divisor, or if the tested 
    divisor becomes greater than the root of n. A number n is prime if the algorithm 
    terminates because the checkable divisor is greater than the root of n.
    '''
    if n % 2 == 0:
        return n == 2
    d = 3
    while d * d <= n and n % d != 0:
        d += 2
    return d * d > n
    

print(is_prime(1))
